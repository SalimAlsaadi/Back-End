// <auto-generated />
using LibraryAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryAPI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231031172734_classNameChangedFromfPatronToUser")]
    partial class classNameChangedFromfPatronToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryAPI.Modules.Book", b =>
                {
                    b.Property<int>("bookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bookId"));

                    b.Property<string>("author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("available_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bookName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("pub_year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("srcImages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("bookId");

                    b.ToTable("books");
                });

            modelBuilder.Entity("LibraryAPI.Modules.Borrow", b =>
                {
                    b.Property<int>("transID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("transID"));

                    b.Property<int>("bookId")
                        .HasColumnType("int");

                    b.Property<string>("borrowDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("patronId")
                        .HasColumnType("int");

                    b.Property<string>("returnDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("transID");

                    b.HasIndex("bookId");

                    b.HasIndex("patronId");

                    b.ToTable("borrowFunctions");
                });

            modelBuilder.Entity("LibraryAPI.Modules.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmpId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("LibraryAPI.Modules.User", b =>
                {
                    b.Property<int>("patronId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patronId"));

                    b.Property<string>("PatronEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatronPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("bank_account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patronName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("patronId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("LibraryAPI.Modules.Borrow", b =>
                {
                    b.HasOne("LibraryAPI.Modules.Book", "book")
                        .WithMany()
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Modules.User", "patron")
                        .WithMany()
                        .HasForeignKey("patronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("patron");
                });
#pragma warning restore 612, 618
        }
    }
}
